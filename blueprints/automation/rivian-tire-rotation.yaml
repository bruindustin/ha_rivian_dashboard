blueprint:
  name: Rivian Tire Rotation Reminder
  description: Sends a reminder notification every specified number of miles, and then every specified number of miles thereafter, until Service mode is enabled, after which it will be reset.
  domain: automation
  input:
    last_tire_rotation_input:
      name: Last Tire Rotation entity
      description: input_number entity that tracks the mileage of the last tire rotation
      selector:
        entity:
          filter:
            - domain: input_number
    odometer_input:
      name: Odometer entity
      description: Rivian integration entity that tracks the odometer of your Rivian
      selector:
        entity:
          filter:
            - integration: rivian
    service_mode_input:
      name: Service Mode entity
      description: Rivian integration entity that tracks whether or not Service Mode is enabled
      selector:
        entity:
          filter:
            - integration: rivian
    mobile_device_notify:
      name: Mobile Device notification entity
      description: The 'notify' entity you want the notifications to be sent to. Must have the Home Assistant mobile app installed
      selector:
        device:
          integration: mobile_app
    mileage_interval:
      name: Mileage interval
      description: Number of miles before sending the initial notification
      default: 7000
      selector:
        number:
          min: 1000
          max: 10000
          unit_of_measurement: miles
          mode: slider
          step: 100
    followup_interval:
      name: Follow-up interval
      description: Number of miles after the initial trigger for follow-up reminders
      default: 100
      selector:
        number:
          min: 50
          max: 500
          unit_of_measurement: miles
          mode: slider
          step: 10

trigger:
  - platform: state
    entity_id: !input odometer_input

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ (states(odometer_input) | float) -
              (states(last_tire_rotation_input) | float) >= mileage_interval }}
        sequence:
          - service: notify.notify
            data:
              target: !input mobile_device_notify
              message: >-
                It's time to rotate your tires again. {{ mileage_interval }} miles reached since
                last rotation.
          - condition: template
            value_template: "{{ is_state(service_mode_input, 'off') }}"
          - service: notify.notify
            data:
              target: !input mobile_device_notify
              message: "Reminder: Please activate Service Mode to confirm tire rotation."
      - conditions:
          - condition: template
            value_template: >
              {{ (states(odometer_input) | float) -
              (states(last_tire_rotation_input) | float) % followup_interval == 0
              and 
                  (states(odometer_input) | float) - (states(last_tire_rotation_input) | float) >= mileage_interval }}
        sequence:
          - condition: template
            value_template: "{{ is_state(service_mode_input, 'off') }}"
          - service: notify.notify
            data:
              target: !input mobile_device_notify
              message: "Reminder: Please activate Service Mode to confirm tire rotation."
  - choose:
      - conditions:
          - condition: state
            entity_id: !input service_mode_input
            state: "off"
          - condition: state
            entity_id: !input service_mode_input
            state: "on"
        sequence:
          - delay: "00:05:00"
          - wait_template: "{{ is_state(service_mode_input, 'off') }}"
          - service: notify.notify
            data:
              target: !input mobile_device_notify
              message: Service Mode deactivated. Tire rotation confirmed.
          - service: input_number.set_value
            data:
              entity_id: !input last_tire_rotation_input
              value: "{{ states(odometer_input) | float }}"
mode: single
